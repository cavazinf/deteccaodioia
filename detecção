import cv2
import numpy as np

# Carregar os nomes das classes
with open("darknet/data/coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]

# Carregar a configuração e os pesos do modelo
net = cv2.dnn.readNet("darknet/cfg/yolov3.cfg", "darknet/yolov3.weights")

# Definir as classes que serão detectadas
layer_names = net.getLayerNames()
output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]

# Carregar e redimensionar a imagem para detecção
image = cv2.imread("caminho_da_sua_imagem.jpg")
height, width = image.shape[:2]
blob = cv2.dnn.blobFromImage(image, 0.00392, (416, 416), (0, 0, 0), True, crop=False)

# Realizar a detecção na imagem
net.setInput(blob)
outs = net.forward(output_layers)

# Processar as detecções
class_ids = []
confidences = []
boxes = []
for out in outs:
    for detection in out:
        scores = detection[5:]
        class_id = np.argmax(scores)
        confidence = scores[class_id]
        if confidence > 0.5:  # Defina o limiar de confiança desejado
            center_x = int(detection[0] * width)
            center_y = int(detection[1] * height)
            w = int(detection[2] * width)
            h = int(detection[3] * height)
            x = center_x - w // 2
            y = center_y - h // 2
            class_ids.append(class_id)
            confidences.append(float(confidence))
            boxes.append([x, y, w, h])

# Supressão não máxima para remover detecções redundantes
indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

# Desenhar as detecções na imagem
colors = np.random.uniform(0, 255, size=(len(classes), 3))
for i in range(len(boxes)):
    if i in indexes:
        x, y, w, h = boxes[i]
        label = str(classes[class_ids[i]])
        color = colors[class_ids[i]]
        cv2.rectangle(image, (x, y), (x + w, y + h), color, 2)
        cv2.putText(image, label, (x, y - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

# Exibir a imagem com as detecções
cv2.imshow("Detecção de Objetos", image)
cv2.waitKey(0)
cv2.destroyAllWindows()
